const { contextBridge, ipcRenderer } = require('electron')

contextBridge.exposeInMainWorld('electronAPI', {
  handleQuery: (callback) => ipcRenderer.on('query', (_event, data) => callback(data)),
  handleExtraLoad: (callback) => ipcRenderer.on('extra_load', (_event, data) => callback(data)),
  handleOptions: (callback) => ipcRenderer.on('options', (_event, data) => callback(data)),
  handleClear: (callback) => ipcRenderer.on('clear', (_event, value) => callback(value)),
  initInfo: (callback) => ipcRenderer.on('init-info', (_event, info) => callback(info)),
  setPrompt: (callback) => ipcRenderer.on('prompt', (_event, prompt) => callback(prompt)),
  handleLog: (callback) => ipcRenderer.on('log', (_event, log) => callback(log)),
  handleMarkDownFormat: (callback) => ipcRenderer.on('markdown-format', (_event, markdown_statu) => callback(markdown_statu)),
  handleMathFormat: (callback) => ipcRenderer.on('math-format', (_event, math_statu) => callback(math_statu)),
  queryText: (data) => ipcRenderer.invoke('query-text', data),
  getFilePath: () => ipcRenderer.invoke('get-file-path'),
  planActMode: (mode) => ipcRenderer.send('plan-act-mode', mode),
  clickSubmit: (formData) => ipcRenderer.send('submit', formData),
  openExternal: (href) => ipcRenderer.send('open-external', href),
  captureRegion: (params) => ipcRenderer.invoke('capture-region', params),
  toggleMessage: (data) => ipcRenderer.invoke('toggle-message', data),
  toggleMemory: (memory_id) => ipcRenderer.invoke('toggle-memory', memory_id),
  handleDeleteMemory: (callback) => ipcRenderer.on('delete-memory', (_event, data) => callback(data)),
  toggleAutoOpt: () => ipcRenderer.send('toggle-auto-opt'),
  streamMessageStop: (id) => ipcRenderer.send('stream-message-stop', id),
  streamData: (callback) => ipcRenderer.on('stream-data', (_event, chunk) => callback(chunk)),
  infoData: (callback) => ipcRenderer.on('info-data', (_event, info) => callback(info)),
  userData: (callback) => ipcRenderer.on('user-data', (_event, info) => callback(info)),
  uploadProgress: (callback) => ipcRenderer.on('upload-progress', (_event, info) => callback(info)),
  newChat: () => ipcRenderer.invoke('new-chat'),
  delChat: (id) => ipcRenderer.send('del-chat', id),
  loadChat: (id) => ipcRenderer.invoke('load-chat', id),
  renameChat: (data) => ipcRenderer.send('rename-chat', data),
  getConfig: () => ipcRenderer.invoke('get-config-main'),
  setConfig: (config) => ipcRenderer.invoke('set-config-main', config),
  setGlobal: (chat) => ipcRenderer.send('set-global', chat),
  handleAutoRenameChat: (callback) => ipcRenderer.on('auto-rename-chat', (_event, chat) => callback(chat)),
})